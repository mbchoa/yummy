// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  favoriteRestaurants FavoriteRestaurant[]
  reviews             FoodReview[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id                  String               @id @default(cuid())
  alias               String
  name                String
  imageUrl            String
  isClosed            Boolean
  url                 String
  reviewCount         Int
  rating              Int
  price               String
  address1            String
  address2            String?
  address3            String?
  city                String
  zipCode             String
  country             String
  state               String
  distance            Float
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  favoriteRestaurants FavoriteRestaurant[]
}

model FavoriteRestaurant {
  id           String       @id @default(cuid())
  userId       String
  restaurantId String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  reviews      FoodReview[]
}

model FoodReview {
  id           String             @id @default(cuid())
  userId       String
  restaurantId String
  like         Boolean
  review       String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   FavoriteRestaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}
