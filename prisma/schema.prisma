// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String                 @id @default(cuid())
  name                String?
  email               String?                @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  reviews             RestaurantItemReview[]
  favoriteRestaurants FavoriteRestaurant[]
  collaborators       Collaborator[]         @relation("collaborators")
  owners              Collaborator[]         @relation("owners")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FavoriteRestaurant {
  id              Int              @unique @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  restaurantId    String
  userId          String
  like            Like             @default(LIKE)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurantItems RestaurantItem[]

  @@id([restaurantId, userId])
}

model RestaurantItem {
  id                   String                 @id @default(cuid())
  name                 String                 @unique
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  restaurantId         String
  userId               String
  restaurant           FavoriteRestaurant     @relation(fields: [restaurantId, userId], references: [restaurantId, userId], onDelete: Cascade)
  restaurantItemReview RestaurantItemReview[]
}

model RestaurantItemReview {
  id               String         @id @default(cuid())
  like             Like           @default(UNSELECTED)
  review           String?
  reviewedById     String?
  restaurantItemId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  reviewedBy       User?          @relation(fields: [reviewedById], references: [id], onDelete: SetNull)
  restaurantItem   RestaurantItem @relation(fields: [restaurantItemId], references: [id], onDelete: Cascade)
}

enum Like {
  LIKE
  DISLIKE
  UNSELECTED
}

model Collaborator {
  id             String   @unique @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  collaborator   User     @relation("collaborators", fields: [collaboratorId], references: [id], onDelete: Cascade)
  collaboratorId String
  owner          User     @relation("owners", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String
}
